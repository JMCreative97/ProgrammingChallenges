int minDominoRotations(vector<int>& A, vector<int>& B) {

    if(A.size() < 2 || B.size() < 2 || A.size() != B.size())return -1;

    int length = A.size();

    map<int, int> m;

    for(int i = 0;i<length;i++){
        m[A[i]]++;
        m[B[i]]++;
    }

    vector<int> viable;

    for (auto const& x : m)
    {
        if(x.second >= length){
            viable.push_back(x.first);
        }
    }

    bool viableA = true, viableB = true;
    int swapA = 0, swapB =0;
    for(int n : viable){

        for(int i = 0;i<=length;i++)
        {

            if(i == length){
                if(viableA && viableB)return min(swapA, swapB);
                else{
                    if(viableA)return swapA;
                    else return swapB;
                }
            }

            //Case A
            if(viableA){
               if(A[i] != n && B[i] == n)swapA++;
               if(A[i] != n && B[i] != n)viableA = false;
            }

            //Case B
            if(viableB){
               if(B[i] != n && A[i] == n)swapB++;
               if(B[i] != n && A[i] != n)viableB = false;
            }

            if(!viableB && !viableA)break;

        }
    }

    return -1;
}
